name: Deploy Testgraal Azure Function Executable

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: terraform-azure-executable

      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan -input=false \
          -var "resource_group_name=testgraal-executable-rg" \
          -var "function_app_name=testgraal-executable-functionapp" \
        working-directory: terraform-azure-executable

      - name: Terraform Apply
        id: registry-terraform
        run: terraform apply -input=false tfplan
        working-directory: terraform-azure-executable

      - uses: actions/download-artifact@v3
        with:
          name: testgraal-executable

      - name: Create folder structure
        run: |
          mkdir -p TestgraalApp/handler

      - name: Move executable and configuration files
        run: |
          mv testgraal-executable TestgraalApp/handler/
          mv azure-executable/function.json TestgraalApp/handler/
          mv azure-executable/host.json TestgraalApp/handler/

      - name: Zip the TestgraalApp directory
        run: |
          zip -r TestgraalApp.zip TestgraalApp

      - name: Upload TestgraalApp.zip as Artifact
        run: |
          az functionapp deployment source config-zip \
            --resource-group testgraal-executable-rg \
            --name testgraal-executable-functionapp \
            --src functionapp-testgraal.zip

  deploy-executable:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find the Last Workflow Run ID with Desired Artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: find-run-id
        run: |
          ARTIFACT_NAME="testgraal-executable"

          # Get the latest workflow runs
          RUNS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs")

          # Iterate through workflow runs to find the artifact
          for RUN_ID in $(echo "$WORKFLOW_RUNS" | jq -r '.workflow_runs[] | select(.status=="completed") | .id'); do
          ARTIFACTS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/actions/runs/$RUN_ID/artifacts")
          
          # Check if the desired artifact exists
          MATCH=$(echo "$ARTIFACTS" | jq -r --arg NAME "$ARTIFACT_NAME" '.artifacts[] | select(.name==$NAME) | .id')
          
          if [[ -n "$MATCH" ]]; then
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          break
          fi
          done
    
          if [[ -z "$MATCH" ]]; then
          echo "Error: Artifact '$ARTIFACT_NAME' not found in recent workflow runs." >&2
          exit 1
          fi       

      - uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GH_PAT }}
          name: testgraal-executable
          run-id: ${{ env.RUN_ID }}

      - name: Create folder structure
        run: |
          mkdir -p TestgraalApp/handler

      - name: Move executable and configuration files
        run: |
          mv testgraal-executable TestgraalApp/handler/
          mv azure-executable/function.json TestgraalApp/handler/
          mv azure-executable/host.json TestgraalApp/handler/

      - name: Zip the TestgraalApp directory
        run: |
          zip -r TestgraalApp.zip TestgraalApp

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload TestgraalApp.zip as Artifact
        run: |
          az functionapp deployment source config-zip \
            --resource-group testgraal-executable-rg \
            --name testgraal-executable-functionapp \
            --src functionapp-testgraal.zip

